apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: mailman-ingress
  annotations:
    kubernetes.io/elb.ip: X.X.X.X
    kubernetes.io/elb.id: XXXXXXX
    kubernetes.io/elb.port: "443"
#    Your default ingress class is probably sufficient even with a secure backend connection
    ingress.kubernetes.io/force-ssl-redirect: "true"
    ingress.kubernetes.io/secure-backends: "true"
#    however if you need an end to end ssl connection
#    you'll might use a more advanced ingress having an ssl-passthrough option e.g. with nginx
#    be aware that ssl-passthrough with nginx works on layer 4 and not layer 7, this is incompatible with real IP forwarding
#    kubernetes.io/ingress.class: "nginx"
#    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
#    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
##   if you are looking for a way to manage letsencrypt certs, certmanager might help
#    certmanager.k8s.io/acme-http01-edit-in-place: "true"
#    certmanager.k8s.io/cluster-issuer: "letsencrypt-example"
#    certmanager.k8s.io/acme-challenge-type: http01

spec:
  tls:
  - hosts:
    - lists.example.com
    secretName: letsencrypt-example-tls

  rules:
  - host: lists.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: mailman-nodeport
          servicePort: 30443
#          servicePort: 30080 # in case you'd prefere a connection to port 80 of the container this service port has to be activated and backend protocol changed
